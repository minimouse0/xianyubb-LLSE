import { MessageSegment } from "./res/types";
import * as events from './res/events';
import { ApiReturn } from './res/parser';
interface Options {
    url: string;
    maxRetries: number;
}
interface PrivateMessage {
    user_id: number;
    message: string | MessageSegment[];
    auto_escape: boolean;
}
interface GroupMessage {
    group_id: number;
    message: string | MessageSegment[];
    auto_escape: boolean;
}
interface DeleteMessage {
    message_id: number;
}
interface getForwardMessage {
    id: string;
}
interface SendLike {
    user_id: number;
    times: number;
}
interface GroupKick {
    group_id: number;
    user_id: number;
    reject_add_request: boolean;
}
interface GroupBan {
    group_id: number;
    user_id: number;
    duration: number;
}
interface GroupAnonymousBan {
    group_id: number;
    flag: string;
    duration: number;
}
interface GroupWholeBan {
    group_id: number;
    enable: boolean;
}
interface SetGroupAdmin {
    group_id: number;
    user_id: number;
    enable: boolean;
}
interface SetGroupAnonymous {
    group_id: number;
    enable: boolean;
}
interface SetGroupCard {
    group_id: number;
    user_id: number;
    card: string;
}
interface SetGroupName {
    group_id: number;
    group_name: string;
}
interface LeaveGroup {
    group_id: number;
    is_dismiss: boolean;
}
interface SetGroupSpecialTitle {
    group_id: number;
    user_id: number;
    special_title: string;
    duration: number;
}
interface SetFriendAddRequest {
    flag: string;
    approve: boolean;
    remark: string;
}
interface SetGroupAddRequest {
    flag: string;
    type: string;
    approve: boolean;
    reason: string;
}
interface GetStrangerInfo {
    user_id: number;
    no_cache: boolean;
}
interface GetGroupInfo {
    group_id: number;
    no_cache: boolean;
}
interface GetGroupMemberInfo {
    group_id: number;
    user_id: number;
    no_cache: boolean;
}
interface GetGroupHonorInfo {
    group_id: number;
    type: string;
}
interface GetRecord {
    file: string;
    out_format: string;
}
interface GetImage {
    file: string;
}
interface Restart {
    delay: number;
}
interface GetCookies {
    domain: string;
}
interface GetCredentials {
    domain: string;
}
export declare class OneBot_WebSocket {
    private socket;
    SocketEvent: events.SocketEvent;
    BotEvent: events.BotEvent;
    private EchoEvent;
    constructor(Options: Options);
    private handleConnect;
    private handleMessage;
    /**
     * @description 发送私聊消息
     */
    send_private_msg(options: PrivateMessage): Promise<ApiReturn>;
    /**
     * @description 发送群消息
     */
    send_group_msg(options: GroupMessage): Promise<ApiReturn>;
    /**
     * @description 撤回消息
     */
    delete_msg(options: DeleteMessage): Promise<ApiReturn>;
    /**
     * @description 获取合并转发消息
     */
    get_forward_msg(options: getForwardMessage): Promise<ApiReturn>;
    send_like(options: SendLike): Promise<ApiReturn>;
    set_group_kick(options: GroupKick): Promise<ApiReturn>;
    set_group_ban(options: GroupBan): Promise<ApiReturn>;
    set_group_anonymous_ban(options: GroupAnonymousBan): Promise<ApiReturn>;
    set_group_whole_ban(options: GroupWholeBan): Promise<ApiReturn>;
    set_group_admin(options: SetGroupAdmin): Promise<ApiReturn>;
    set_group_anonymous(options: SetGroupAnonymous): Promise<ApiReturn>;
    set_group_card(options: SetGroupCard): Promise<ApiReturn>;
    set_group_name(options: SetGroupName): Promise<ApiReturn>;
    set_group_leave(options: LeaveGroup): Promise<ApiReturn>;
    set_group_special_title(options: SetGroupSpecialTitle): Promise<ApiReturn>;
    set_friend_add_request(options: SetFriendAddRequest): Promise<ApiReturn>;
    set_group_add_request(options: SetGroupAddRequest): Promise<ApiReturn>;
    get_stranger_info(options: GetStrangerInfo): Promise<ApiReturn>;
    get_group_info(options: GetGroupInfo): Promise<ApiReturn>;
    get_group_member_info(options: GetGroupMemberInfo): Promise<ApiReturn>;
    get_group_honor_info(options: GetGroupHonorInfo): Promise<ApiReturn>;
    get_cookies(options: GetCookies): Promise<ApiReturn>;
    get_credentials(options: GetCredentials): Promise<ApiReturn>;
    get_record(options: GetRecord): Promise<ApiReturn>;
    get_image(options: GetImage): Promise<ApiReturn>;
    set_restart(options: Restart): Promise<ApiReturn>;
    clean_cache(): Promise<ApiReturn>;
    can_send_image(): Promise<ApiReturn>;
    can_send_record(): Promise<ApiReturn>;
    get_status(): Promise<ApiReturn>;
    get_version_info(): Promise<ApiReturn>;
    get_csrf_token(): Promise<ApiReturn>;
    get_group_member_list(): Promise<ApiReturn>;
    get_group_list(): Promise<ApiReturn>;
    get_friend_list(): Promise<ApiReturn>;
    get_login_info(): Promise<ApiReturn>;
}
export {};
